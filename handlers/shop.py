from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from asyncio import sleep
from database import requests as rq
from config import admin_list

from bot import bot

import keyboards.kb as kb
import keyboards.pagination as pag

class many_items(StatesGroup):
    item = State()

class appeals(StatesGroup):
    appeal = State()

router = Router()
@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    await state.clear()
    get_user = await rq.get_user(message.from_user.id)
    arguments = []
    try:
        arguments = command.args.split("_")
    except:
        pass
    if not arguments:
        if not get_user:
            await rq.set_user(message.from_user.id)
        if message.from_user.id in admin_list:
            kbrd = kb.main_admin
        else:
            kbrd = kb.main_user
        await message.answer('''üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç–æ–≤–∞—Ä–æ–≤! ‚ú® –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! 
                            
    üîé –ò—â–µ—à—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ? –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Å—ë: –æ—Ç –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–æ –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!

    üí¨ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!

    –ù–∞—á–Ω–∏ —à–æ–ø–∏–Ω–≥ —É–∂–µ —Å–µ–π—á–∞—Å –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏!

    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! üéà''', reply_markup=kbrd)
        
    elif len(arguments) == 2 and arguments[0] == "c":
        if not get_user:
            await rq.set_user(message.from_user.id)
        await message.answer(
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", 
            reply_markup = await pag.buy_kb_items(int(arguments[1]))
        )

    elif len(arguments) == 3 and arguments[0] == "c":
        if not get_user:
            await rq.set_user(message.from_user.id)
        text_message = ''
        category_id = int(arguments[1])
        item_id = int(arguments[2])
        item = await rq.buy_info_item(item_id)
        user = await rq.get_user(message.from_user.id)
        text_message += f'‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∫—É–ø–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ \n\nüõí\t–¢–æ–≤–∞—Ä:\t{item.name}\nüí∞\t–¶–µ–Ω–∞:\t{item.price}‚ÇΩ\nüìë\t–ö–æ–ª-–≤–æ:\t{item.amount}\nüìù\t–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n\nüí≤\t–í–∞—à –±–∞–ª–∞–Ω—Å:\t{user.balance}‚ÇΩ'
        await message.answer(
            text_message, 
            reply_markup = await pag.buy_kb_one__or_many(category_id, item_id)
        )

    elif len(arguments) == 2 and arguments[0] == "r" and not get_user:
        who_invited_id = int(arguments[1])
        await rq.set_user(message.from_user.id, who_invited_id)
        if message.from_user.id in admin_list:
            kbrd = kb.main_admin
        else:
            kbrd = kb.main_user
        await message.answer('''üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç–æ–≤–∞—Ä–æ–≤! ‚ú® –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! 
                            
    üîé –ò—â–µ—à—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ? –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Å—ë: –æ—Ç –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–æ –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!

    üí¨ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!

    –ù–∞—á–Ω–∏ —à–æ–ø–∏–Ω–≥ —É–∂–µ —Å–µ–π—á–∞—Å –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏!

    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! üéà''', reply_markup=kbrd)


@router.message(F.text.contains("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
async def cmd_profile(message: Message):
    user = await rq.get_user(message.from_user.id)
    sum = await rq.get_sum_purschases(message.from_user.id)
    if user.who_invited:
        await message.answer(
            f'ü§µ\t–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n\nüÜî\t–í–∞—à id:\t<code>{message.from_user.id}</code> '
            f'\n\nüí∏\t–°—É–º–º–∞ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫: {sum}\t‚ÇΩ \nüí≥\t–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}\t‚ÇΩ'
            f'\n\nü§ùüèº\t–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: \t<code>{user.who_invited}</code>'
            f'\nüë•\t –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referals)}'
            f'\n\nüì¢\t –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/Kaifirikovski_Magazine_bot?start=r_{user.tg_id}',
            parse_mode="HTML", reply_markup = kb.profile_user
        )
    else:
        await message.answer(
            f'ü§µ\t–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n\nüÜî\t–í–∞—à id:\t<code>{message.from_user.id}</code> '
            f'\n\nüí∏\t–°—É–º–º–∞ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫: {sum}\t‚ÇΩ \nüí≥\t–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}\t‚ÇΩ'
            f'\n\nüë•\t –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referals)}'
            f'\nüì¢\t –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/Kaifirikovski_Magazine_bot?start=r_{user.tg_id}',
            parse_mode="HTML", reply_markup = kb.profile_user
        )

@router.message(F.text.contains("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
async def cmd_profile_back(message: Message, state: FSMContext):
    await state.clear()
    user = await rq.get_user(message.from_user.id)
    sum = await rq.get_sum_purschases(message.from_user.id)
    if message.from_user.id in admin_list:
        kbrd = kb.main_admin
    else:
        kbrd = kb.main_user
    await message.answer(
        f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', 
        reply_markup = kbrd
    )

@router.message(F.text.contains("–¢–æ–≤–∞—Ä—ã"))
async def cmd_profile_items(message: Message):
    categories = (await rq.get_categories()).all()
    text_message = ''
    for category in categories:
        items = (await rq.get_items(category.id)).all()
        if items:
            text_message += f'‚îÄ‚îÄ‚îÄ‚îÄ <a href="https://t.me/Kaifirikovski_Magazine_bot?start=c_{category.id}">{category.name}</a> ‚îÄ‚îÄ‚îÄ‚îÄ\n'
            for item in items:
                if (item.amount > 0):
                    text_message += f'<a href="https://t.me/Kaifirikovski_Magazine_bot?start=c_{category.id}_{item.id}">üíé\t\t{item.name} - {item.description} | {item.price}‚ÇΩ | {item.amount} —à—Ç.</a>\n'
            text_message += f'\n\n'
    if (text_message):
        await message.answer(text_message, parse_mode = "HTML")
    else:
        await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")

@router.message(F.text.contains("–ö—É–ø–∏—Ç—å"))
async def cmd_profile_buy(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", 
        reply_markup = await pag.buy_kb_categories()
    )

@router.callback_query(F.data.startswith("back"))
async def buy_category(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", 
        reply_markup = await pag.buy_kb_categories()
    )

@router.callback_query(pag.Buy_category.filter())
async def buy_category(callback: CallbackQuery, callback_data: pag.Buy_category):
    category_id = callback_data.category_id
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", 
        reply_markup= await pag.buy_kb_items(category_id)
    )
    await callback.answer()

@router.callback_query(pag.Buy_item.filter())
async def buy_item(callback: CallbackQuery, callback_data: pag.Buy_item):
    text_message = ''
    category_id = callback_data.category_id
    item_id = callback_data.item_id
    item = await rq.buy_info_item(item_id)
    user = await rq.get_user(callback.from_user.id)
    text_message += f'‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∫—É–ø–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ\n\nüõí\t–¢–æ–≤–∞—Ä:\t{item.name}\nüí∞\t–¶–µ–Ω–∞:\t{item.price}‚ÇΩ\nüìë\t–ö–æ–ª-–≤–æ:\t{item.amount}\nüìù\t–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}\n\nüí≤\t–í–∞—à –±–∞–ª–∞–Ω—Å:\t{user.balance}‚ÇΩ'
    
    await callback.message.edit_text(
        text_message, 
        reply_markup = await pag.buy_kb_one__or_many(category_id, item_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_one_item_"))
async def buy_one_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[3])
    item = await rq.buy_info_item(item_id)
    user = await rq.get_user(callback.from_user.id)
    text_message = ''
    if (user.balance - item.price >= 0):
        text_message = f'üõí\t–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {item.price}‚ÇΩ\nüí∞\t–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?'
        keybrd = await kb.accept_buy_1(item_id)
    else:
        text_message = f'üõí\t–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {item.price}‚ÇΩ\n‚õî\t–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {item.price-user.balance}‚ÇΩ\n\n'
        keybrd = await kb.deposit()

    await callback.message.answer(
        text_message, 
        reply_markup = keybrd
    )
    await callback.answer()

@router.callback_query(F.data.startswith("buy_more_item_"))
async def buy_many_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[3])
    item = await rq.buy_info_item(item_id)

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
        f"\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\t<b>1</b>\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        f"\t<b>{item.amount}</b>", parse_mode="HTML"
    )

    await state.set_state(many_items.item)
    await state.update_data(item = item_id)

    await callback.answer()


@router.message(many_items.item)
async def many_buy_item(message: Message, state: FSMContext):
    data = await state.get_data()
    item_count = int(message.text)
    item_id = data['item']
    item = await rq.buy_info_item(item_id)

    if (item_count <= item.amount):
        user = await rq.get_user(message.from_user.id)
        text_message = ''
        if (user.balance - item_count*item.price >= 0):
            text_message = f'üõí\t–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {item_count*item.price}‚ÇΩ\nüí∞\t–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?'
            keybrd = await kb.accept_buy_many(item_id, item_count)
        else:
            text_message = f'üõí\t–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {item_count*item.price}‚ÇΩ\n‚õî\t–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {item_count*item.price-user.balance}‚ÇΩ\n\n'
            keybrd = await kb.deposit()
        await message.answer(text_message, reply_markup = keybrd)
        await state.clear()
    else:
        await message.answer(
            f"–¢–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
            f"\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\t<b>1</b>\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            f"\t<b>{item.amount}</b>", parse_mode="HTML"
        )



@router.callback_query(F.data.startswith("accept_"))
async def buy_many_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[3])
    item_count = int(callback.data.split("_")[1])
    item = await rq.buy_info_item(item_id)
    if item.amount >= item_count:
        product = await rq.buy_item(callback.from_user.id, item_id, item_count)
        text_message = "–í–∞—à —Ç–æ–≤–∞—Ä:\n"
        for item in product:
            text_message += f'{item.data}\n'
        await callback.message.edit_text(text_message)
    else:
        await callback.message.edit_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –Ω–µ—Ç.')
    await callback.answer()


@router.message(F.text.contains("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"))
async def cmd_profile_buy(message: Message):
    await message.answer(
        "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫", 
        reply_markup = await pag.get_paginated_kb(message.from_user.id)
    )


@router.callback_query(pag.Pagination.filter())
async def products_pagination_callback(callback: CallbackQuery, callback_data: pag.Pagination):
    page = callback_data.page
    await callback.message.edit_text(
        "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫", 
        reply_markup=await pag.get_paginated_kb(callback.from_user.id, page)
    )
    

@router.callback_query(pag.ProductData.filter())
async def products_pagination_callback(callback: CallbackQuery, callback_data: pag.ProductData):
    purschase_id = callback_data.purschase_id
    purschase = await rq.get_one_purschase(callback.from_user.id, purschase_id)

    await callback.message.edit_text(
        f'üóìÔ∏è\t–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {purschase.created_at.year}/{purschase.created_at.month:02}/{purschase.created_at.day:02}\t{purschase.created_at.hour:02}:{purschase.created_at.minute:02}:{purschase.created_at.second:02}\n\n'
        f'üÜî\t–ù–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏: <code>{purschase_id}</code>\n\n'
        f'üìù\t–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {purschase.name_of_purschase}\n\n'
        f'üí≤\t–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {purschase.sum_of_purschase}‚ÇΩ\n\n'
        f'üìä\t–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n\n{purschase.product_of_purschase}',
        reply_markup=await pag.back_to_history(),
        parse_mode="HTML"
    )


@router.message(F.text.contains("–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def cmd_profile_buy(message: Message, state: FSMContext):
    if await rq.get_apeal(message.from_user.id):
        await message.answer("–í–∞—à–µ –ø—Ä–æ—à–ª–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å (–º–∞–∫—Å–∏–º—É–º 250 —Å–∏–º–≤–æ–ª–æ–≤)")
        await state.set_state(appeals.appeal)


@router.message(appeals.appeal)
async def cmd_profile_buy(message: Message, state: FSMContext):
    if len(message.text) <= 250:
        await rq.add_apeal(message.from_user.id, message.text)
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await state.clear()
    else:
        await message.answer("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–≤–æ–≤!")


@router.callback_query(F.data == "check_subcr")
async def check_subcr(callback: CallbackQuery):
    sub = await bot.get_chat_member(chat_id = -1002263423567, user_id = callback.from_user.id)
    if sub.status != "left":
        await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
    await callback.answer()
